/*-------------------------------------------------------------------------*/

joint.shapes.sql = {}

/*-------------------------------------------------------------------------*/

joint.shapes.sql.Table = joint.shapes.basic.Generic.extend({
	/*-----------------------------------------------------------------*/

	markup: [
		'<g class="rotatable">',
		  '<g class="scalable">',
			'<rect class="sql-table-body" />',
		  '</g>',
		  '<path class="sql-table-separator" />',
		  '<text class="sql-table-name" />',
		  '<text class="sql-table-fields" />',
		'</g>'
	].join(''),

	/*-----------------------------------------------------------------*/

	defaults: joint.util.deepSupplement({

		type: 'sql.Table',

		size: {
			width: 228,
			height: 40,
		},

		attrs: {
			'.sql-table-body': {
				'width': 200,
				'height': 200,
				'rx': 10,
				'ry': 10,
				'fill': '#0066CC',
				'stroke': '#0033CC',
				'stroke-width': 2
			},
			'.sql-table-separator': {
				'stroke': '#0033CC',
				'stroke-width': 2
			},
			'.sql-table-name': {
				'ref': '.sql-table-body',
				'ref-x': .5,
				'ref-y': 5,
				'text-anchor': 'middle',
				'fill': 'white',
				'font-family': 'Courier New',
				'font-weight': 'bold',
				'font-size': 14
			},
			'.sql-table-fields': {
				'ref': '.sql-table-body',
				'ref-y': 30,
				'ref-x': 10,
				'text-anchor': 'top',
				'fill': 'white',
				'font-family': 'Times New Roman',
				'font-weight': 'normal',
				'font-size': 14,
			},
		},

		name: '',
		fields: [],
		fkeys: [],

	}, joint.shapes.basic.Generic.prototype.defaults),

	/*-----------------------------------------------------------------*/

	initialize: function() {

		this.on({
			'change:name': this.updateName,
			'change:fields': this.updatePath,
			'change:size': this.updatePath,

		}, this);

		this.updateName();
		this.updatePath();

		joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	},

	/*-----------------------------------------------------------------*/

	getName: function() {
		return this.get('name');
	},

	setName: function(name) {
		this.set('name', name);
		this.updateName();
	},

	/*-----------------------------------------------------------------*/

	getFields: function() {
		return this.get('fields');
	},

	setFields: function(fields) {
		this.set('fields', fields);
		this.updatePath();
	},

	/*-----------------------------------------------------------------*/

	getFKeys: function() {
		return this.get('fkeys');
	},

	setFKeys: function(fkeys) {
		this.set('fkeys', fkeys);
	},

	/*-----------------------------------------------------------------*/

	updateName: function() {

		this.attr('.sql-table-name/text', this.get('name'));
	},

	/*-----------------------------------------------------------------*/

	updatePath: function() {

		var lines = [];

		_.each(this.get('fields'), function(field) {
			lines.push(field.name + ': ' + field.type);
		});

		var width = this.get('size').width;
		var height = lines.length * 14 + 36;

		var d = 'M 0 23 L ' + width + ' 23';
		var text = lines.join('\n');

		this.attr('.sql-table-separator/d', d);
		this.attr('.sql-table-fields/text', text);

		this.set('size', {
			width: width,
			height: height,
		});
	}

	/*-----------------------------------------------------------------*/
});

/*-------------------------------------------------------------------------*/
