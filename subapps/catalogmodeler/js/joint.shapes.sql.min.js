/*-------------------------------------------------------------------------*/

function _my_rounded_rect(x, y, w, h, r, tl, tr, bl, br) {

	var retval = "M" + (x + r) + "," + y;

	retval += "h" + (w - 2 * r);
	if(tr) {
		retval += "a" + r + "," + r + " 0 0 1 " + (+r) + "," + (+r);
	} else {
		retval += "h" + (+r);
		retval += "v" + (+r);
	}

	retval += "v" + (h - 2 * r);
	if(br) {
		retval += "a" + r + "," + r + " 0 0 1 " + (-r) + "," + (+r);
	}
	else {
		retval += "v" + (+r);
		retval += "h" + (-r);
	}

	retval += "h" + (2 * r - w);
	if(bl) {
		retval += "a" + r + "," + r + " 0 0 1 " + (-r) + "," + (-r);
	}
	else {
		retval += "h" + (-r);
		retval += "v" + (-r);
	}

	retval += "v" + (2 * r - h);
	if(tl) {
		retval += "a" + r + "," + r + " 0 0 1 " + (+r) + "," + (-r);
	} else {
		retval += "v" + (-r);
		retval += "h" + (+r);
	}

	return retval + "z";
}

/*-------------------------------------------------------------------------*/

joint.shapes.sql = {}

/*-------------------------------------------------------------------------*/

joint.shapes.sql.Table = joint.shapes.basic.Generic.extend({
	/*-----------------------------------------------------------------*/

	markup: [
		'<g class="rotatable">',
		  '<path class="sql-table-top" />',
		  '<path class="sql-table-body" />',
		  '<text class="sql-table-name" />',
		  '<text class="sql-table-fields" />',
		'</g>'
	].join(''),

	/*-----------------------------------------------------------------*/

	defaults: joint.util.deepSupplement({

		type: 'sql.Table',

		size: {
			width: 228,
			height: 14,
		},

		attrs: {
			'.sql-table-top': {
				'fill': '#0066CC',
				'stroke': '#0033CC',
				'stroke-width': 2,
			},

			'.sql-table-body': {
				'fill': '#FFFFFF',
				'stroke': '#0033CC',
				'stroke-width': 2,
			},
			'.sql-table-name': {
				'ref': '.sql-table-top',
				'ref-y': 0.55,
				'ref-x': 0.5,
				'x-alignment': 'middle',
				'y-alignment': 'middle',
				'fill': 'white',
				'font-family': 'Courier New',
				'font-weight': 'bold',
				'font-size': 14,
			},
			'.sql-table-fields': {
				'ref': '.sql-table-body',
				'ref-y': 7.5,
				'ref-x': 10,
				'fill': 'black',
				'font-family': 'Times New Roman',
				'font-weight': 'normal',
				'font-size': 14,
			},
		},

		name: '',
		encoding: '',
		fields: [],
		fkeys: [],
		indices: [],

	}, joint.shapes.basic.Generic.prototype.defaults),

	/*-----------------------------------------------------------------*/

	initialize: function() {

		this.on({
			'change:name': this.updateName,
			'change:fields': this.updateFields,

		}, this);

		this.updateName();
		this.updateFields();

		joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	},

	/*-----------------------------------------------------------------*/

	getName: function() {
		return this.get('name');
	},

	setName: function(name) {
		this.set('name', name);
		this.updateName();
	},

	/*-----------------------------------------------------------------*/

	getEncoding: function() {
		return this.get('encoding');
	},

	setEncoding: function(encoding) {
		this.set('encoding', encoding);
		this.updateEncoding();
	},

	/*-----------------------------------------------------------------*/

	getFields: function() {
		return this.get('fields');
	},

	setFields: function(fields) {
		this.set('fields', fields);
		this.updateFields();
	},

	/*-----------------------------------------------------------------*/

	getFKeys: function() {
		return this.get('fkeys');
	},

	setFKeys: function(fkeys) {
		this.set('fkeys', fkeys);
	},

	/*-----------------------------------------------------------------*/

	getIndices: function() {
		return this.get('indices');
	},

	setIndices: function(indices) {
		this.set('indices', indices);
	},

	/*-----------------------------------------------------------------*/

	updateName: function() {

		this.attr('.sql-table-name/text', this.get('name').toUpperCase());
	},

	/*-----------------------------------------------------------------*/

	updateEncoding: function() {

		/* TODO */
	},

	/*-----------------------------------------------------------------*/

	updateFields: function() {

		var nr = 0
		var text = '';

		_.each(this.get('fields'), function(field) {

			nr++;

			text += field.name + ': ' + field.type + '\n';
		});

		var width = this.get('size').width;
		var height = Math.ceil((nr * 14 + 20) / 10.0) * 10 - 2;

		this.attr('.sql-table-top/d', _my_rounded_rect(0, 0, width, 20, 8, true, true, false, false));
		this.attr('.sql-table-body/d', _my_rounded_rect(0, 20, width, height, 2, false, false, true, true));

		this.attr('.sql-table-fields/text', text);

		this.resize(width, height);
	}

	/*-----------------------------------------------------------------*/
});

/*-------------------------------------------------------------------------*/
